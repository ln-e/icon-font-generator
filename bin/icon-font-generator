#! /usr/bin/env node

'strict mode';

const { removeUndefinedKeys } = require('../lib/utils');
const fontGenerator = require('../lib/index');
const errors = require('../lib/errors');
const minimist = require('minimist');
const glob = require('glob');

/**
 * Initialise script and options
 *
 * @return {void}
 */
function init() {
  const args = minimist(process.argv.slice(2));
  const types = (args.types || 'svg,ttf,woff,woff2,eot')
    .split(',')
    .map((ext) => ext.trim());

  const options = removeUndefinedKeys({
    paths: getPaths(args._),
    outputDir: args.o || args.out,
    fontName: args.n || args.name,
    fontsPath: args.f || args.fontspath,
    types: types,
    ts: args.ts,
    css: args.c || args.css,
    cssPath: args.csspath,
    cssFontsUrl: args.cssfontsurl,
    cssTemplate: args.csstp,
    json: args.j || args.json,
    jsonPath: args.jsonpath,
    ligature: args.ligature,
    html: args.html,
    htmlPath: args.htmlpath,
    htmlTemplate: args.htmltp,
    silent: args.s || args.silent || false,
    startCodepoint: args.codepoint,
    codepoints: args.codepoints,
    classPrefix: args.p || args.prefix,
    baseTag: args.t || args.tag,
    baseSelector: args.selector,
    normalize: args.normalize,
    round: args.round,
    descent: args.descent,
    fixedWidth: args.mono,
    fontHeight: args.height,
    centerHorizontally: args.center,
  });

  const calledEmpty = Object.keys(args).length === 1 && args._.length === 0;
  const formats = ['html', 'css', 'json'];

  // Parse Boolean values that default to true
  formats.forEach((key) => {
    if (typeof options[key] !== 'undefined') {
      options[key] = options[key] === 'true';
    }
  });

  // Show usage if missing any arguments or called with -h / --help
  if (args.h || args.help || calledEmpty) {
    showHelp();
    return process.exit();
  }

  run(options);
}

/**
 * Run icon font kit creation
 *
 * @param  {Object} options
 * @return {void}
 */
function run(options) {
  fontGenerator
    .generate(options, (err) => (err ? fail(err) : null))
    .catch((err) => fail(err));
}

/**
 * Fail - Interrut process and log validation errors or throw unhandled exceptions
 *
 * @param  {Error|ValidationError} err
 * @return {void}
 */
function fail(err) {
  if (typeof err === 'string' || err instanceof errors.ValidationError) {
    console.error(err.red || err.message.red);
    process.exit();
  }

  if (err instanceof Error) {
    throw err;
  }
}

/**
 * Display usage
 *
 * @return {void}
 */
function showHelp() {
  console.log(
    'Usage   :' +
      ' icon-font-generator [ svg-icons-glob ] -o [ output-dir ] [ options ]\n' +
      'Example :' +
      ' icon-font-generator src/*.svg -o dist\n\n' +
      'Options:\n' +
      '  -o, --out        ' +
      'Output icon font set files to <out> directory\n'.italic +
      '  -n, --name       ' +
      'Name to use for generated fonts and files (Default: icons)\n' +
      '  -s, --silent     ' +
      'Do not produce output logs other than errors (Default: false)\n' +
      '  -f, --fontspath  ' +
      'Relative path to fonts directory to use in output files (Default: ./)\n' +
      '  -c, --css        ' +
      'Generate CSS file if true (Default: true)\n' +
      '  --types          ' +
      'Comma delimited list of font types (Defaults to svg,ttf,woff,eot)\n' +
      '  --csspath        ' +
      'CSS output path (Defaults to <out>/<name>.css)\n' +
      '  --cssfontsurl    ' +
      'CSS fonts directory url (Defaults to relative path)\n' +
      '  --csstp          ' +
      'CSS handlebars template path (Optional)\n' +
      '  --html           ' +
      'Generate HTML preview file if true (Default: true)\n' +
      '  --htmlpath       ' +
      'HTML output path (Defaults to <out>/<name>.html)\n' +
      '  --htmltp         ' +
      'HTML handlebars template path (Optional)\n' +
      '  --codepoint      ' +
      'The starting character code to count up from (Optional)\n' +
      '  --codepoints     ' +
      'Path to explicit character code mapping JSON file (Optional)\n' +
      '  -j, --json       ' +
      'Generate JSON map file if true (Default: true)\n' +
      '  --jsonpath       ' +
      'JSON output path (Defaults to <out>/<name>.json)\n' +
      '  --ligatures      ' +
      'Enable ligatures generator\n' +
      '  -p, --prefix     ' +
      'CSS classname prefix for icons (Default: icon)\n' +
      '  -t, --tag        ' +
      'CSS base selector for icons (Default: i)\n' +
      '  --selector       ' +
      "Use a selector instead of 'tag + prefix' (Default: null)\n" +
      '  --normalize      ' +
      'Normalize icons sizes (Default: false)\n' +
      '  --round          ' +
      'Setup SVG rounding (Default: 10e12)\n' +
      '  --descent        ' +
      'Offset applied to the baseline (Default: 0)\n' +
      '  --mono           ' +
      'Make font monospace (Default: false)\n' +
      '  --height         ' +
      'Fixed font height value\n' +
      '  --center         ' +
      'Center font horizontally',
  );
}

/**
 * Resolve globs
 *
 * @param  {String} globs
 * @return {[String]}
 */
function getPaths(globs) {
  var out = [];

  globs.forEach((str) => (out = out.concat(glob.sync(str))));

  return out;
}

init();
